#include <render/Common.hpp>

#define VKL_FORMAT_HELPER(__x) case __x: return #__x

namespace vkl {
	std::string const FormnatVersion(uint32_t version) {
		return
			std::to_string(VK_VERSION_MAJOR(version)) + "." +
			std::to_string(VK_VERSION_MINOR(version)) + "." +
			std::to_string(VK_VERSION_PATCH(version));
	}

	std::string const FormatResult(VkResult result) {
		switch (result) {
			VKL_FORMAT_HELPER(VK_SUCCESS);
			VKL_FORMAT_HELPER(VK_NOT_READY);
			VKL_FORMAT_HELPER(VK_TIMEOUT);
			VKL_FORMAT_HELPER(VK_EVENT_SET);
			VKL_FORMAT_HELPER(VK_EVENT_RESET);
			VKL_FORMAT_HELPER(VK_INCOMPLETE);
			VKL_FORMAT_HELPER(VK_ERROR_OUT_OF_HOST_MEMORY);
			VKL_FORMAT_HELPER(VK_ERROR_OUT_OF_DEVICE_MEMORY);
			VKL_FORMAT_HELPER(VK_ERROR_INITIALIZATION_FAILED);
			VKL_FORMAT_HELPER(VK_ERROR_DEVICE_LOST);
			VKL_FORMAT_HELPER(VK_ERROR_MEMORY_MAP_FAILED);
			VKL_FORMAT_HELPER(VK_ERROR_LAYER_NOT_PRESENT);
			VKL_FORMAT_HELPER(VK_ERROR_EXTENSION_NOT_PRESENT);
			VKL_FORMAT_HELPER(VK_ERROR_FEATURE_NOT_PRESENT);
			VKL_FORMAT_HELPER(VK_ERROR_INCOMPATIBLE_DRIVER);
			VKL_FORMAT_HELPER(VK_ERROR_TOO_MANY_OBJECTS);
			VKL_FORMAT_HELPER(VK_ERROR_FORMAT_NOT_SUPPORTED);
			VKL_FORMAT_HELPER(VK_ERROR_SURFACE_LOST_KHR);
			VKL_FORMAT_HELPER(VK_ERROR_NATIVE_WINDOW_IN_USE_KHR);
			VKL_FORMAT_HELPER(VK_SUBOPTIMAL_KHR);
			VKL_FORMAT_HELPER(VK_ERROR_OUT_OF_DATE_KHR);
			VKL_FORMAT_HELPER(VK_ERROR_INCOMPATIBLE_DISPLAY_KHR);
			VKL_FORMAT_HELPER(VK_ERROR_VALIDATION_FAILED_EXT);
		}
		return "VKL_UNKNOWN_RESULT";
	}

	std::string const FormatDeviceType(VkPhysicalDeviceType type) {
		switch (type) {
			VKL_FORMAT_HELPER(VK_PHYSICAL_DEVICE_TYPE_OTHER);
			VKL_FORMAT_HELPER(VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU);
			VKL_FORMAT_HELPER(VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU);
			VKL_FORMAT_HELPER(VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU);
			VKL_FORMAT_HELPER(VK_PHYSICAL_DEVICE_TYPE_CPU);
		}
		return "VKL_UNKNOWN_DEVICE";
	}
}
